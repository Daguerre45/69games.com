var app = require('../app');
var debug = require('debug')('ejemploexpressgenerator:server');
var http = require('http');
const socketIo = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: 'http://localhost:3000', // o la URL de tu aplicación front-end
    methods: ['GET', 'POST'],
  },
});

io.on('connection', (socket) => {
  
  socket.on('buscarUsuarios', async (term) => {
    try {
      // Realizar la búsqueda en la base de datos (puedes ajustar según tu modelo de usuario)
      const resultados = await User.find({ username: { $regex: new RegExp(term, 'i') } });

      // Enviar los resultados al cliente
      socket.emit('usuariosEncontrados', resultados);
    } catch (error) {
      console.error('Error al buscar usuarios:', error);
    }
  });

  console.log('Usuario conectado: ' + socket.id);

  // Manejar mensajes del cliente
  socket.on('mensaje', (mensaje) => {
    // Enviar el mensaje a todos los clientes conectados
    io.emit('mensaje', mensaje);
  });

  // Manejar desconexiones
  socket.on('disconnect', () => {
    console.log('Usuario desconectado: ' + socket.id);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
